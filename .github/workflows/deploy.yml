name: Android Release

on:
  workflow_dispatch:
  push:
    branches: [main, master]

jobs:
  build-android:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: "3.24.3"
          cache: true

      - name: Install Android SDK 35 + build-tools
        env:
          ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
        run: |
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" \
            "platform-tools" \
            "platforms;android-35" \
            "build-tools;35.0.0"
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses

      # ---- Caches (speed) ----
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle', '**/*.gradle.kts', 'gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: Cache Pub
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: pub-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}
          restore-keys: pub-${{ runner.os }}-

      # ---- Project hygiene ----
      - name: Remove KTS duplicates if present
        run: |
          rm -f android/settings.gradle.kts || true
          rm -f android/app/build.gradle.kts || true

      - name: Ensure Android wrapper exists
        run: |
          if [ ! -f android/gradlew ]; then
            flutter create . --platforms=android --project-name autocare_pro
          fi
          chmod +x android/gradlew

      # ---- Provision signing (writes files CI-only; nothing in repo) ----
      - name: Provision Android keystore & key.properties
        run: |
          # write keystore where the app module looks for it
          echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > android/app/upload-keystore.jks

          # write android/key.properties consumed by app/build.gradle
          cat > android/key.properties <<EOF
          storeFile=upload-keystore.jks
          storePassword=${ANDROID_KEYSTORE_PASSWORD}
          keyAlias=${ANDROID_KEY_ALIAS}
          keyPassword=${ANDROID_KEY_ALIAS_PASSWORD}
          EOF

          ls -la android/key.properties android/app/upload-keystore.jks
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_ALIAS_PASSWORD: ${{ secrets.ANDROID_KEY_ALIAS_PASSWORD }}

      # ---- Pub resolution guard for flutter_local_notifications ^19.x ----
      - name: Update timezone dep (if needed)
        run: |
          if grep -q 'timezone:' pubspec.yaml && grep -q '^ *timezone: *\^0\.9\.' pubspec.yaml; then
            flutter pub add timezone:^0.10.1
          fi
          flutter pub get

      # ---- Build APK (signed) ----
      - name: Build release APK
        run: |
          flutter --version
          # once stable, you can remove 'flutter clean' to get more cache benefits
          flutter clean
          flutter pub get
          flutter build apk --release -v

      # ---- Optional backup artifact on GitHub ----
      - name: Upload APK artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: build/app/outputs/flutter-apk/app-release.apk

      # ---- Distribute to Firebase (single tester via token auth) ----
      - name: Firebase App Distribution (Android)
        if: success()
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_ANDROID_APP_ID }}     # e.g. 1:1234567890:android:abc123...
          token: ${{ secrets.FIREBASE_TOKEN }}              # from `firebase login:ci`
          file: build/app/outputs/flutter-apk/app-release.apk
          testers: "ahmerparacha2016@gmail.com"                        # <-- put your email
          releaseNotes: "CI build ${{ github.run_number }} from ${{ github.sha }}"
          debug: true

      # ---- Diagnostics if build fails ----
      - name: Gradle signingReport (diagnostic)
        if: failure() && hashFiles('android/gradlew') != ''
        run: |
          cd android
          ./gradlew signingReport --no-daemon || true

      - name: Gradle assemble with stacktrace (diagnostic)
        if: failure() && hashFiles('android/gradlew') != ''
        run: |
          cd android
          ./gradlew app:assembleRelease --no-daemon --stacktrace --info || true
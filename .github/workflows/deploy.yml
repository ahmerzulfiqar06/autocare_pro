name: Android Release

on:
  workflow_dispatch:
  push:
    branches: [main, master]

jobs:
  build-android:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: "3.24.3"
          cache: true

      - name: Install Android SDK 35 + build-tools
        env:
          ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
        run: |
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" \
            "platform-tools" \
            "platforms;android-35" \
            "build-tools;35.0.0"
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses

      # ---- Caches ----
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle', '**/*.gradle.kts', 'gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: Cache Pub
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: pub-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}
          restore-keys: pub-${{ runner.os }}-

      # ---- Project hygiene ----
      - name: Remove KTS duplicates if present
        run: |
          rm -f android/settings.gradle.kts || true
          rm -f android/app/build.gradle.kts || true

      - name: Ensure Android wrapper exists
        run: |
          if [ ! -f android/gradlew ]; then
            flutter create . --platforms=android --project-name autocare_pro
          fi
          chmod +x android/gradlew

      # ---- Signing ----
      - name: Provision Android keystore & key.properties
        run: |
          echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > android/app/upload-keystore.jks
          echo "storeFile=upload-keystore.jks" > android/key.properties
          echo "storePassword=${ANDROID_KEYSTORE_PASSWORD}" >> android/key.properties
          echo "keyAlias=${ANDROID_KEY_ALIAS}" >> android/key.properties
          echo "keyPassword=${ANDROID_KEY_ALIAS_PASSWORD}" >> android/key.properties
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_ALIAS_PASSWORD: ${{ secrets.ANDROID_KEY_ALIAS_PASSWORD }}

      - name: Pub get (resolve deps)
        run: flutter pub get

      - name: Verify signing files
        run: |
          ls -l android/app
          echo "---- key.properties ----"
          sed -n '1,50p' android/key.properties | sed -E 's/(password=).*/\1****/g'

      - name: keytool sanity check
        run: |
          keytool -list -v -keystore android/app/upload-keystore.jks -alias "$ANDROID_KEY_ALIAS" -storepass "$ANDROID_KEYSTORE_PASSWORD" >/dev/null
        env:
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}

      # ---- Build APK ----
      - name: Gradle assembleRelease (with stacktrace)
        run: |
          cd android
          ./gradlew clean
          ./gradlew :app:assembleRelease --no-daemon --stacktrace --info --warning-mode all | tee ../gradle-build.log
          cd ..
        shell: bash

      - name: Upload Gradle log on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: gradle-build-log
          path: gradle-build.log

      # ---- Locate, normalize, and rename APK (for Firebase) ----
      - name: Locate and rename APK
        run: |
          set -e

          echo "=== Listing potential output folders (ignore errors if missing) ==="
          ls -R android/app/build/outputs || true
          ls -R build/app/outputs || true

          APK=""

          # 1) Common Gradle output
          if [ -f android/app/build/outputs/apk/release/app-release.apk ]; then
            APK=android/app/build/outputs/apk/release/app-release.apk
          fi

          # 2) Any Gradle-produced release APK (fallback)
          if [ -z "$APK" ]; then
            APK=$(find android/app/build/outputs -type f \
                    \( -name "app-release*.apk" -o -name "app-*-release*.apk" \) \
                    2>/dev/null | head -n 1 || true)
          fi

          # 3) Flutterâ€™s default path
          if [ -z "$APK" ] && [ -d build/app/outputs/flutter-apk ]; then
            APK=$(find build/app/outputs/flutter-apk -type f -name "app-release*.apk" | head -n 1 || true)
          fi

          if [ -z "$APK" ]; then
            echo "::error::No APK found. Check the Gradle step logs above for the build error."
            exit 1
          fi

          echo "âœ… Found APK: $APK"

          mkdir -p build/app/outputs/flutter-apk

          # Build dynamic filename with date + build number
          DATE=$(date +'%Y-%m-%d')
          DEST="build/app/outputs/flutter-apk/app-release-${DATE}-build-${GITHUB_RUN_NUMBER}.apk"

          if [ "$APK" != "$DEST" ]; then
            cp "$APK" "$DEST"
          else
            echo "ðŸ“¦ APK already at correct location, skipping copy."
          fi

          echo "FINAL_APK_PATH=$DEST" >> $GITHUB_ENV

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: ${{ env.FINAL_APK_PATH }}

      - name: Firebase App Distribution (Android)
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_ANDROID_APP_ID }}
          token: ${{ secrets.FIREBASE_TOKEN }}
          file: ${{ env.FINAL_APK_PATH }}
          testers: "ahmerparacha2016@gmail.com"
          releaseNotes: "ðŸ“± CI build ${{ github.run_number }} â€¢ Commit ${{ github.sha }} â€¢ $(date +'%Y-%m-%d')"
          debug: true

      # ---- Build AAB for Play Store ----
      - name: Build App Bundle (AAB)
        run: |
          cd android
          ./gradlew :app:bundleRelease --no-daemon --stacktrace --info --warning-mode all
          cd ..
        shell: bash

      - name: Locate and upload AAB artifact
        run: |
          set -e
          AAB="android/app/build/outputs/bundle/release/app-release.aab"
          if [ ! -f "$AAB" ]; then
            echo "::error::AAB not found at $AAB"
            exit 1
          fi
          DATE=$(date +'%Y-%m-%d')
          DEST="build/app/outputs/bundle/app-release-${DATE}-build-${GITHUB_RUN_NUMBER}.aab"
          mkdir -p build/app/outputs/bundle
          cp "$AAB" "$DEST"
          echo "FINAL_AAB_PATH=$DEST" >> $GITHUB_ENV

      - name: Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-aab
          path: ${{ env.FINAL_AAB_PATH }}
pluginManagement {
    def flutterSdkPath = {
        // Read from ../local.properties (generated by Flutter) or FLUTTER_HOME
        def props = new Properties()
        def f = new File(settingsDir, "../local.properties")
        if (f.exists()) {
            f.withInputStream { props.load(it) }
            def path = props.getProperty("flutter.sdk")
            if (path) return path
        }

        // Try FLUTTER_HOME environment variable
        def flutterHome = System.getenv("FLUTTER_HOME")
        if (flutterHome) return flutterHome

        // Try common CI paths
        def ciPaths = [
            "/opt/hostedtoolcache/flutter/stable-3.24.3-x64",
            "/opt/hostedtoolcache/flutter/stable-3.22.0-x64",
            "/usr/local/flutter"
        ]

        for (path in ciPaths) {
            if (new File("${path}/packages/flutter_tools/gradle").exists()) {
                return path
            }
        }

        // If all else fails, return null and handle it gracefully
        return null
    }.call()

    // Only include Flutter build if the path exists and is not null
    if (flutterSdkPath && new File("${flutterSdkPath}/packages/flutter_tools/gradle").exists()) {
        includeBuild("${flutterSdkPath}/packages/flutter_tools/gradle")
        println "Flutter SDK found at: ${flutterSdkPath}"
    } else {
        println "Warning: Flutter SDK not found. Please ensure Flutter is installed and FLUTTER_HOME is set."
    }

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}

plugins {
    id "dev.flutter.flutter-plugin-loader" version "1.0.0" apply false
    id "com.android.application" version "8.11.1" apply false
    id "org.jetbrains.kotlin.android" version "1.9.22" apply false
}

include(":app")